/*****************************************************************************
*  Calaulate State transition matrix fd          							 *
*  @file     ekf_cal_fd.cpp                                                  *
*  @brief    E.Q2: P^k = fd*(P^k-1)*fd^T +Q                                  *
*  Details.                                                                  *
*                                                                            *
*  @author   Yan li                                                          *
*  @email    liyan1@mogoauto.com                                             *
*  @version  1.0.0.1                                                         *
*  @date     2021.06.21                                                      *
*                                                                            *
*----------------------------------------------------------------------------*
*  Remark         : Description                                              *
*----------------------------------------------------------------------------*
*  Change History :                                                          *
*  <Date>     | <Version> | <Author>       | <Description>                   *
*----------------------------------------------------------------------------*
*  2021.06.21 | 1.0.0.1   | Yan Li         | Create file                     *
*----------------------------------------------------------------------------*
*                                                                            *
*****************************************************************************/

#include "ekf.h"

void EKF::CalcFd(   double dt, 
                    const double (&quat)[4], 
                    const double (&gyro)[3], 
                    const double (&acc)[3], 
                    double (&Fd)[324]   )

{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8_tmp;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t17;
  double t13;
  double t14;
  double t15;
  double t26;
  double t16;
  double t18;
  double t19;
  double t20;
  double t21;
  double t22;
  double t23;
  double t24;
  double t28;
  double t30;
  double t33;
  double t37;
  double t39_tmp;
  double t42;
  double t44;
  double t49;
  double t46;
  double t47;
  double t51;
  double t54;
  double t56;
  double t63;
  double t65_tmp;
  double t67;
  double t68;
  double t69;
  double t71;
  double t75;
  double t78;
  double t88_tmp;
  double t88;
  double t89;
  double t90;
  double t91;
  double t92;
  double t93;
  double t94;
  double Fd_tmp;
  double b_Fd_tmp;
  double c_Fd_tmp;
  double d_Fd_tmp;
  double e_Fd_tmp;

  // This function was generated by the Symbolic Math Toolbox version 8.2.
  t2 = dt * dt;
  t3 = gyro[1] * gyro[1];
  t4 = gyro[2] * gyro[2];
  t5 = t3 + t4;
  t6 = gyro[0] * gyro[0];
  t7 = dt * gyro[2];
  t8_tmp = t2 * gyro[0];
  t8 = t8_tmp * gyro[1] / 2.0;
  t9 = t4 + t6;
  t10 = t8_tmp * gyro[2] / 2.0;
  t11 = t3 + t6;
  t12 = dt * gyro[0];
  t17 = t2 * gyro[1];
  t13 = t17 * gyro[2] / 2.0;
  t14 = t17 / 2.0;
  t15 = quat[0] * quat[3] * 2.0;
  t26 = quat[1] * quat[2] * 2.0;
  t16 = t15 - t26;
  t17 = quat[0] * quat[0];
  t18 = quat[1] * quat[1];
  t19 = quat[2] * quat[2];
  t20 = quat[3] * quat[3];
  t21 = ((t17 + t18) - t19) - t20;
  t22 = quat[0] * quat[2] * 2.0;
  t23 = quat[1] * quat[3] * 2.0;
  t24 = t22 + t23;
  t28 = acc[1] * t24 + acc[2] * t16;
  t30 = acc[2] * t21 - acc[0] * t24;
  t33 = acc[1] * t21 + acc[0] * t16;
  t37 = t33 * gyro[1] + t30 * gyro[2];
  t39_tmp = t30 * gyro[0] - t28 * gyro[1];
  t42 = t28 * gyro[2] + t33 * gyro[0];
  t17 -= t18;
  t44 = (t17 + t19) - t20;
  t18 = quat[0] * quat[1] * 2.0;
  t49 = quat[2] * quat[3] * 2.0;
  t46 = t18 - t49;
  t47 = t15 + t26;
  t51 = acc[2] * t44 + acc[1] * t46;
  t54 = acc[0] * t46 + acc[2] * t47;
  t56 = acc[0] * t44 - acc[1] * t47;
  t26 = t56 * gyro[0] + t51 * gyro[2];
  t63 = t54 * gyro[0] + t51 * gyro[1];
  t65_tmp = t56 * gyro[1] - t54 * gyro[2];
  t67 = (t17 - t19) + t20;
  t68 = t18 + t49;
  t69 = t22 - t23;
  t71 = acc[1] * t67 - acc[2] * t68;
  t75 = acc[0] * t68 + acc[1] * t69;
  t78 = acc[0] * t67 + acc[2] * t69;
  t17 = t78 * gyro[0] + t71 * gyro[1];
  t18 = t75 * gyro[1] + t78 * gyro[2];
  t15 = t75 * gyro[0] - t71 * gyro[2];
  t88_tmp = dt * t2;
  t88 = t88_tmp * t37 / 6.0;
  t89 = t2 * t33 / 2.0;
  t90 = t2 * t51 / 2.0;
  t91 = t88_tmp * t26 / 6.0;
  t92 = t2 * t78 / 2.0;
  t93 = t88_tmp * t15 / 6.0;
  t94 = t88_tmp * t17 / 6.0;
  Fd[0] = t2 * t5 * -0.5 + 1.0;
  Fd[1] = (-t7 + t8) + t88_tmp * (t3 * gyro[2] + t9 * gyro[2]) / 6.0;
  Fd_tmp = dt * gyro[1];
  Fd[2] = (t10 + Fd_tmp) - t88_tmp * (t4 * gyro[1] + t11 * gyro[1]) / 6.0;
  Fd[3] = (dt * t28 - t2 * t37 / 2.0) + t88_tmp * (t39_tmp * gyro[1] - t42 *
    gyro[2]) / 6.0;
  Fd[4] = (-dt * t51 + t2 * t65_tmp / 2.0) + t88_tmp * (t63 * gyro[1] + t26 *
    gyro[2]) / 6.0;
  Fd[5] = (dt * t71 + t2 * t18 / 2.0) - t88_tmp * (t17 * gyro[1] - t15 * gyro
    [2]) / 6.0;
  b_Fd_tmp = t2 * t28 / 2.0;
  Fd[6] = -t88 + b_Fd_tmp;
  c_Fd_tmp = t88_tmp * t65_tmp / 6.0;
  Fd[7] = -t90 + c_Fd_tmp;
  d_Fd_tmp = t2 * t71;
  e_Fd_tmp = t88_tmp * t18 / 6.0;
  Fd[8] = d_Fd_tmp / 2.0 + e_Fd_tmp;
  memset(&Fd[9], 0, 9U * sizeof(double));
  Fd[18] = (t7 + t8) - t88_tmp * (t5 * gyro[2] + t6 * gyro[2]) / 6.0;
  Fd[19] = t2 * t9 * -0.5 + 1.0;
  Fd[20] = (-t12 + t13) + t88_tmp * (t4 * gyro[0] + t11 * gyro[0]) / 6.0;
  Fd[21] = (dt * t30 + t2 * t42 / 2.0) - t88_tmp * (t39_tmp * gyro[0] + t37 *
    gyro[2]) / 6.0;
  Fd[22] = (dt * t54 - t2 * t26 / 2.0) - t88_tmp * (t63 * gyro[0] - t65_tmp *
    gyro[2]) / 6.0;
  Fd[23] = (-dt * t78 - t2 * t15 / 2.0) + t88_tmp * (t17 * gyro[0] + t18 *
    gyro[2]) / 6.0;
  t20 = t2 * t30;
  t22 = t88_tmp * t42 / 6.0;
  Fd[24] = t20 / 2.0 + t22;
  t23 = t2 * t54 / 2.0;
  Fd[25] = -t91 + t23;
  Fd[26] = -t92 - t93;
  memset(&Fd[27], 0, 9U * sizeof(double));
  Fd[36] = (t10 - Fd_tmp) + t88_tmp * (t5 * gyro[1] + t6 * gyro[1]) / 6.0;
  Fd[37] = (t12 + t13) - t88_tmp * (t3 * gyro[0] + t9 * gyro[0]) / 6.0;
  Fd[38] = t2 * t11 * -0.5 + 1.0;
  Fd[39] = (-dt * t33 + t2 * t39_tmp / 2.0) + t88_tmp * (t42 * gyro[0] + t37 *
    gyro[1]) / 6.0;
  Fd[40] = (dt * t56 + t2 * t63 / 2.0) - t88_tmp * (t26 * gyro[0] + t65_tmp *
    gyro[1]) / 6.0;
  Fd[41] = (dt * t75 - t2 * t17 / 2.0) - t88_tmp * (t15 * gyro[0] + t18 *
    gyro[1]) / 6.0;
  Fd_tmp = t88_tmp * t39_tmp / 6.0;
  Fd[42] = -t89 + Fd_tmp;
  t19 = t2 * t56;
  t26 = t88_tmp * t63 / 6.0;
  Fd[43] = t19 / 2.0 + t26;
  t49 = t2 * t75 / 2.0;
  Fd[44] = -t94 + t49;
  memset(&Fd[45], 0, 12U * sizeof(double));
  Fd[57] = 1.0;
  Fd[58] = 0.0;
  Fd[59] = 0.0;
  Fd[60] = dt;
  memset(&Fd[61], 0, 15U * sizeof(double));
  Fd[76] = 1.0;
  Fd[77] = 0.0;
  Fd[78] = 0.0;
  Fd[79] = dt;
  memset(&Fd[80], 0, 15U * sizeof(double));
  Fd[95] = 1.0;
  Fd[96] = 0.0;
  Fd[97] = 0.0;
  Fd[98] = dt;
  memset(&Fd[99], 0, 15U * sizeof(double));
  Fd[114] = 1.0;
  memset(&Fd[115], 0, 18U * sizeof(double));
  Fd[133] = 1.0;
  memset(&Fd[134], 0, 18U * sizeof(double));
  Fd[152] = 1.0;
  memset(&Fd[153], 0, 9U * sizeof(double));
  Fd[162] = -dt + t88_tmp * t5 / 6.0;
  t17 = t88_tmp * gyro[0];
  t18 = t2 * gyro[2];
  t15 = t17 * gyro[1] / 6.0;
  Fd[163] = t18 / 2.0 - t15;
  t17 = t17 * gyro[2] / 6.0;
  Fd[164] = -t14 - t17;
  Fd[165] = t88 - b_Fd_tmp;
  Fd[166] = t90 - c_Fd_tmp;
  Fd[167] = d_Fd_tmp * -0.5 - e_Fd_tmp;
  Fd[168] = t88_tmp * t28 * -0.16666666666666666;
  Fd[169] = t88_tmp * t51 / 6.0;
  Fd[170] = t88_tmp * t71 * -0.16666666666666666;
  Fd[171] = 1.0;
  memset(&Fd[172], 0, sizeof(double) << 3);
  Fd[180] = t18 * -0.5 - t15;
  Fd[181] = -dt + t88_tmp * t9 / 6.0;
  b_Fd_tmp = t88_tmp * gyro[1] * gyro[2] / 6.0;
  Fd[182] = t8_tmp / 2.0 - b_Fd_tmp;
  Fd[183] = t20 * -0.5 - t22;
  Fd[184] = t91 - t23;
  Fd[185] = t92 + t93;
  Fd[186] = t88_tmp * t30 * -0.16666666666666666;
  Fd[187] = t88_tmp * t54 * -0.16666666666666666;
  Fd[188] = t88_tmp * t78 / 6.0;
  Fd[189] = 0.0;
  Fd[190] = 1.0;
  Fd[191] = 0.0;
  Fd[192] = 0.0;
  Fd[193] = 0.0;
  Fd[194] = 0.0;
  Fd[195] = 0.0;
  Fd[196] = 0.0;
  Fd[197] = 0.0;
  Fd[198] = t14 - t17;
  Fd[199] = t8_tmp * -0.5 - b_Fd_tmp;
  Fd[200] = -dt + t88_tmp * t11 / 6.0;
  Fd[201] = t89 - Fd_tmp;
  Fd[202] = t19 * -0.5 - t26;
  Fd[203] = t94 - t49;
  Fd[204] = t88_tmp * t33 / 6.0;
  Fd[205] = t88_tmp * t56 * -0.16666666666666666;
  Fd[206] = t88_tmp * t75 * -0.16666666666666666;
  Fd[207] = 0.0;
  Fd[208] = 0.0;
  Fd[209] = 1.0;
  memset(&Fd[210], 0, 9U * sizeof(double));
  Fd[219] = -dt * t21;
  Fd[220] = -dt * t47;
  Fd[221] = dt * t69;
  Fd[222] = t2 * t21 * -0.5;
  Fd[223] = t2 * t47 * -0.5;
  Fd[224] = t2 * t69 / 2.0;
  Fd[225] = 0.0;
  Fd[226] = 0.0;
  Fd[227] = 0.0;
  Fd[228] = 1.0;
  memset(&Fd[229], 0, sizeof(double) << 3);
  Fd[237] = dt * t16;
  Fd[238] = -dt * t44;
  Fd[239] = -dt * t68;
  Fd[240] = t2 * t16 / 2.0;
  Fd[241] = t2 * t44 * -0.5;
  Fd[242] = t2 * t68 * -0.5;
  Fd[243] = 0.0;
  Fd[244] = 0.0;
  Fd[245] = 0.0;
  Fd[246] = 0.0;
  Fd[247] = 1.0;
  Fd[248] = 0.0;
  Fd[249] = 0.0;
  Fd[250] = 0.0;
  Fd[251] = 0.0;
  Fd[252] = 0.0;
  Fd[253] = 0.0;
  Fd[254] = 0.0;
  Fd[255] = -dt * t24;
  Fd[256] = dt * t46;
  Fd[257] = -dt * t67;
  Fd[258] = t2 * t24 * -0.5;
  Fd[259] = t2 * t46 / 2.0;
  Fd[260] = t2 * t67 * -0.5;
  Fd[261] = 0.0;
  Fd[262] = 0.0;
  Fd[263] = 0.0;
  Fd[264] = 0.0;
  Fd[265] = 0.0;
  Fd[266] = 1.0;
  memset(&Fd[267], 0, 18U * sizeof(double));
  Fd[285] = 1.0;
  memset(&Fd[286], 0, 18U * sizeof(double));
  Fd[304] = 1.0;
  memset(&Fd[305], 0, 18U * sizeof(double));
  Fd[323] = 1.0;
}

